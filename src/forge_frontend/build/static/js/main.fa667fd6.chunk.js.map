{"version":3,"sources":["components/AdminTesting.module.css","assets/stake.png","assets/unstake.png","components/Staking.module.css","App.module.css","components/Navigation.module.css","components/Staking.js","components/AdminTesting.js","components/Navigation.js","App.js","index.js"],"names":["module","exports","for_testing","network","__webpack_require__","p","Staking","icon","inputDiv","input","totals","goMax","stakeButton","unstakeButton","stakeIcon","Grid","Child","curtain","navigation","buttonActive","buttonNonActive","props","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","className","classes","account","apy","type","min","step","onChange","event","preventDefault","target","value","inputHandler","onClick","stakeHandler","src","alt","unStakeHandler","unstakeIcon","totalStaked","myStake","toFixed","userBalance","AdminTesting","claimBTC","redistributeRewards","page","name","id","contractBalance","tokenStakingContract","_address","Navigation","poolStatus","setPoolStatus","changePool","val","changePage","App","setAccount","_useState3","_useState4","setNetwork","_useState5","_useState6","testTokenContract","setTestTokenContract","_useState7","_useState8","setTokenStakingContract","_useState9","_useState10","_useState11","_useState12","setContractBalance","_useState13","_useState14","setTotalStaked","_useState15","_useState16","setMyStake","_useState17","_useState18","appStatus","setAppStatus","_useState19","_useState20","loader","setLoader","_useState21","_useState22","setUserBalance","_useState23","_useState24","setApy","_useState25","_useState26","setPage","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetchDataFromBlockchain","stop","apply","this","arguments","ethEnabled","_ref2","_callee2","web3","accounts","networkId","networkType","testTokenData","_web","testToken","testTokenBalance","convertedBalance","tempBalance","_totalStaked","tokenStakingData","_web2","tokenStaking","_myStake","_convertedBalance","myCustomStake","tempCustomdBalance","tempTotalStaked","tempcustomTotalStaked","tempconvertedBalance","tempApy","tempcustomApy","_context2","window","ethereum","request","method","Web3","eth","getAccounts","sent","net","getId","getNetworkType","objectSpread","TestToken","networks","Contract","abi","address","methods","balanceOf","call","utils","fromWei","toString","TokenStaking","alert","stakingBalance","customStakingBalance","customTotalStaked","defaultAPY","t0","t1","customAPY","t2","t3","_ref3","_callee3","_context3","send","from","on","hash","receipt","confirmationNumber","error","console","log","code","redistributeCustomRewards","_ref4","_callee4","_context4","customRewards","claimTst","_ref5","_callee5","_context5","components_Navigation","components_Staking","unstakeTokens","message","customUnstake","convertToWei","toWei","approve","stakeTokens","customStaking","received","components_AdminTesting","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fa667fd6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"for_testing\":\"AdminTesting_for_testing__3RzrX\",\"network\":\"AdminTesting_network__IHgMl\"};","module.exports = __webpack_public_path__ + \"static/media/stake.e8708439.png\";","module.exports = __webpack_public_path__ + \"static/media/unstake.cebdc53d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Staking\":\"Staking_Staking__1Pc_2\",\"icon\":\"Staking_icon__1pC9R\",\"inputDiv\":\"Staking_inputDiv__397ud\",\"input\":\"Staking_input__2ePGI\",\"totals\":\"Staking_totals__5yUfu\",\"goMax\":\"Staking_goMax__3lS_9\",\"stakeButton\":\"Staking_stakeButton__2Qe3V\",\"unstakeButton\":\"Staking_unstakeButton__19vWQ\",\"stakeIcon\":\"Staking_stakeIcon__1oz-u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"App_Grid__1iJRp\",\"Child\":\"App_Child__1GR3u\",\"curtain\":\"App_curtain__1TgFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__30H3E\",\"buttonActive\":\"Navigation_buttonActive__1EbPy\",\"buttonNonActive\":\"Navigation_buttonNonActive__2IPaw\"};","import React, { useState } from 'react';\nimport classes from './Staking.module.css';\nimport stakeIcon from '../assets/stake.png';\nimport unstakeIcon from '../assets/unstake.png';\n// import icon from '../assets/icon.png';\n\nconst Staking = (props) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const inputChangeHandler = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n    props.inputHandler(event.target.value);\n  };\n\n  const goMax = () => {\n    setInputValue(props.userBalance);\n    props.inputHandler(props.userBalance);\n  };\n\n  return (\n    <div className={classes.Staking}>\n      {/* <img src={icon} alt=\"logo\" className={classes.icon} /> */}\n      <h1> CKBTC Staking dApp</h1>\n      <p>{props.account}</p>\n      <h3>\n        {props.apy}% (CKBTC) - {props.apy / 365}% Daily Earnings\n      </h3>\n      <div className={classes.inputDiv}>\n        <input\n          className={classes.input}\n          type=\"number\"\n          min=\"0\"\n          step=\"1\"\n          onChange={inputChangeHandler}\n          value={inputValue}\n        ></input>\n      </div>\n      <button\n        className={classes.stakeButton}\n        onClick={() => {\n          props.stakeHandler();\n          setInputValue('');\n        }}\n      >\n        <img src={stakeIcon} alt=\"stake icon\" className={classes.stakeIcon} />\n        <p>Stake</p>\n      </button>\n      &nbsp; &nbsp;\n      <button className={classes.unstakeButton} onClick={props.unStakeHandler}>\n        <img\n          src={unstakeIcon}\n          alt=\"unstake icon\"\n          className={classes.stakeIcon}\n        />\n        <p>Unstake All</p>\n      </button>\n      <div className={classes.totals}>\n        <h4>\n          Total Staked (by all users): {props.totalStaked} CKBtc (BTC)\n        </h4>\n        <div>&nbsp;</div>\n        <h5>My Stake: {props.myStake} CKBtc (BTC) </h5>\n        <h5>\n          My Estimated Reward:{' '}\n          {((props.myStake * props.apy) / 36500).toFixed(3)} CKBtc (BTC)\n        </h5>\n        <h5 onClick={goMax} className={classes.goMax}>\n          My balance: {props.userBalance} CKBtc (BTC)\n        </h5>\n      </div>\n    </div>\n  );\n};\n//My balance: 504304.394968082 CKBtc (BTC)\nexport default Staking;\n","import React from 'react';\nimport classes from './AdminTesting.module.css';\n\nconst AdminTesting = (props) => {\n  return (\n    <div className={classes.for_testing}>\n      <p>FOR TESTING PURPOSE ONLY</p>\n      <button onClick={props.claimBTC}>Claim for 1000 BTC (User)</button>\n      &nbsp; &nbsp;\n      <button onClick={props.redistributeRewards}>\n        {props.page === 1\n          ? `Redistribute rewards (Admin)`\n          : `Custom redistribution (Admin)`}\n      </button>\n      <div className={classes.network}>\n        <p>\n          Selected Network: <b>{props.network.name}</b>\n          &nbsp; id: <b>{props.network.id}</b>\n        </p>\n        <p>Contract Balance: {props.contractBalance} CKBTC (BTC) </p>\n        <p>Staking Contract address: {props.tokenStakingContract._address}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminTesting;\n","import React, { useState } from 'react';\nimport classes from './Navigation.module.css';\n\nconst Navigation = (props) => {\n  const [poolStatus, setPoolStatus] = useState('default');\n\n  const changePool = (val) => {\n    if (val === poolStatus) {\n    } else {\n      setPoolStatus(val);\n      props.changePage();\n    }\n  };\n\n  return (\n    <div className={classes.navigation}>\n         <button\n        className={\n          poolStatus === 'default'\n            ? classes.buttonActive\n            : classes.buttonNonActive\n        }\n        onClick={() => {\n          changePool('default');\n        }}\n      >\n        {props.apy[0]}% (CKBTC)\n      </button>\n      <button\n        className={\n          poolStatus === 'custom'\n            ? classes.buttonActive\n            : classes.buttonNonActive\n        }\n        onClick={() => {\n          changePool('custom');\n        }}\n      >\n        {props.apy[1]}% (CKBTC)\n      </button>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React, { useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport classes from './App.module.css';\nimport TestToken from '../src/abis/TestToken.json';\nimport TokenStaking from '../src/abis/TokenStaking.json';\nimport Staking from './components/Staking';\nimport AdminTesting from './components/AdminTesting';\nimport Navigation from './components/Navigation';\n\nconst App = () => {\n  const [account, setAccount] = useState('Connecting to ICP..');\n  const [network, setNetwork] = useState({ id: '0', name: 'none' });\n  const [testTokenContract, setTestTokenContract] = useState('');\n  const [tokenStakingContract, setTokenStakingContract] = useState('');\n  const [inputValue, setInputValue] = useState('');\n  const [contractBalance, setContractBalance] = useState('0');\n  const [totalStaked, setTotalStaked] = useState([0, 0]);\n  const [myStake, setMyStake] = useState([0, 0]);\n  const [appStatus, setAppStatus] = useState(true);\n  const [loader, setLoader] = useState(false);\n  const [userBalance, setUserBalance] = useState('0');\n  const [apy, setApy] = useState([0, 0]);\n  const [page, setPage] = useState(1);\n\n  useEffect(() => {\n    //connecting to ethereum blockchain\n    const ethEnabled = async () => {\n      fetchDataFromBlockchain();\n    };\n\n    ethEnabled();\n  }, []);\n\n  //  const changePage = () => {\n  //     if (page === 1) {\n  //       setPage(2);\n  //     } else if (page === 2) {\n  //       setPage(1);\n  //     }\n  //   };\n\n  const fetchDataFromBlockchain = async () => {\n    if (window.ethereum) {\n      // await window.ethereum.send('eth_requestAccounts');\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n\n      //connecting to metamask\n      let web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      setAccount(accounts[0]);\n\n      //loading users network ID and name\n      const networkId = await web3.eth.net.getId();\n      const networkType = await web3.eth.net.getNetworkType();\n      setNetwork({ ...network, id: networkId, name: networkType });\n\n      //loading TestToken contract data\n      const testTokenData = TestToken.networks[networkId];\n      if (testTokenData) {\n        let web3 = window.web3;\n        const testToken = new web3.eth.Contract(\n          TestToken.abi,\n          testTokenData.address\n        );\n        setTestTokenContract(testToken);\n        //  fetching balance of Testtoken and storing in state\n        let testTokenBalance = await testToken.methods\n          .balanceOf(accounts[0])\n          .call();\n        let convertedBalance = window.web3.utils.fromWei(\n          testTokenBalance.toString(),\n          'Ether'\n        );\n        setUserBalance(convertedBalance);\n\n        //fetching contract balance\n        //updating total staked balance\n        const tempBalance = TokenStaking.networks[networkId];\n        let totalStaked = await testToken.methods\n          .balanceOf(tempBalance.address)\n          .call();\n\n        convertedBalance = window.web3.utils.fromWei(\n          totalStaked.toString(),\n          'Ether'\n        );\n        //removing initial balance\n        setContractBalance(convertedBalance);\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TestToken contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //loading TokenStaking contract data\n      const tokenStakingData = TokenStaking.networks[networkId];\n\n      if (tokenStakingData) {\n        let web3 = window.web3;\n        const tokenStaking = new web3.eth.Contract(\n          TokenStaking.abi,\n          tokenStakingData.address\n        );\n        setTokenStakingContract(tokenStaking);\n        //  fetching total staked TokenStaking  and storing in state\n        let myStake = await tokenStaking.methods\n          .stakingBalance(accounts[0])\n          .call();\n\n        let convertedBalance = window.web3.utils.fromWei(\n          myStake.toString(),\n          'Ether'\n        );\n\n        let myCustomStake = await tokenStaking.methods\n          .customStakingBalance(accounts[0])\n          .call();\n\n        let tempCustomdBalance = window.web3.utils.fromWei(\n          myCustomStake.toString(),\n          'Ether'\n        );\n\n        setMyStake([convertedBalance, tempCustomdBalance]);\n\n        //checking totalStaked\n        let tempTotalStaked = await tokenStaking.methods.totalStaked().call();\n        convertedBalance = window.web3.utils.fromWei(\n          tempTotalStaked.toString(),\n          'Ether'\n        );\n        let tempcustomTotalStaked = await tokenStaking.methods\n          .customTotalStaked()\n          .call();\n        let tempconvertedBalance = window.web3.utils.fromWei(\n          tempcustomTotalStaked.toString(),\n          'Ether'\n        );\n        setTotalStaked([convertedBalance, tempconvertedBalance]);\n\n        //fetching APY values from contract\n        let tempApy =\n          ((await tokenStaking.methods.defaultAPY().call()) / 1000) * 365;\n        let tempcustomApy =\n          ((await tokenStaking.methods.customAPY().call()) / 1000) * 365;\n        setApy([tempApy, tempcustomApy]);\n      } else {\n        setAppStatus(false);\n        window.alert(\n          'TokenStaking contract is not deployed on this network, please change to testnet'\n        );\n      }\n\n      //removing loader\n      setLoader(false);\n    } else if (!window.web3) {\n      setAppStatus(false);\n      setAccount('Metamask is not detected');\n      setLoader(false);\n    }\n  };\n\n  const inputHandler = (received) => {\n    setInputValue(received);\n  };\n\n  const changePage = () => {\n    if (page === 1) {\n      setPage(2);\n    } else if (page === 2) {\n      setPage(1);\n    }\n  };\n\n  const stakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      if (!inputValue || inputValue === '0' || inputValue < 0) {\n        setInputValue('');\n      } else {\n        setLoader(true);\n        let convertToWei = window.web3.utils.toWei(inputValue, 'Ether');\n\n        //aproving tokens for spending\n        testTokenContract.methods\n          .approve(tokenStakingContract._address, convertToWei)\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            if (page === 1) {\n              tokenStakingContract.methods\n                .stakeTokens(convertToWei)\n                .send({ from: account })\n                .on('transactionHash', (hash) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                })\n                .on('receipt', (receipt) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                })\n                .on('confirmation', (confirmationNumber, receipt) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                });\n            } else if (page === 2) {\n              tokenStakingContract.methods\n                .customStaking(convertToWei)\n                .send({ from: account })\n                .on('transactionHash', (hash) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                })\n                .on('receipt', (receipt) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                })\n                .on('confirmation', (confirmationNumber, receipt) => {\n                  setLoader(false);\n                  fetchDataFromBlockchain();\n                });\n            }\n          })\n          .on('error', function(error) {\n            setLoader(false);\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const unStakeHandler = () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n\n      // let convertToWei = window.web3.utils.toWei(inputValue, 'Ether')\n      if (page === 1) {\n        tokenStakingContract.methods\n          .unstakeTokens()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n\n        setInputValue('');\n      } else if (page === 2) {\n        tokenStakingContract.methods\n          .customUnstake()\n          .send({ from: account })\n          .on('transactionHash', (hash) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('receipt', (receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n          .on('confirmation', (confirmationNumber, receipt) => {\n            setLoader(false);\n            fetchDataFromBlockchain();\n          })\n\n          .on('error', function(error) {\n            console.log('Error Code:', error.code);\n            console.log(error.message);\n            setLoader(false);\n          });\n        setInputValue('');\n      }\n    }\n  };\n\n  const redistributeRewards = async () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      tokenStakingContract.methods\n        .redistributeRewards()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n    }\n  };\n\n  const redistributeCustomRewards = async () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      tokenStakingContract.methods\n        .customRewards()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n    }\n  };\n\n  const claimTst = async () => {\n    if (!appStatus) {\n    } else {\n      setLoader(true);\n      tokenStakingContract.methods\n        .claimTst()\n        .send({ from: account })\n        .on('transactionHash', (hash) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('receipt', (receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('confirmation', (confirmationNumber, receipt) => {\n          setLoader(false);\n          fetchDataFromBlockchain();\n        })\n        .on('error', function(error) {\n          console.log('Error Code:', error.code);\n          console.log(error.code);\n          setLoader(false);\n        });\n    }\n  };\n\n  return (\n    <div className={classes.Grid}>\n      {loader ? \n      <div className={classes.curtain}></div> \n      : null}\n      <div className={classes.loader}></div>\n      <div className={classes.Child}>\n      <Navigation changePage={changePage} />\n        <Navigation apy={apy} changePage={changePage} />\n        <div>\n          <Staking\n            account={account}\n            totalStaked={page === 1 ? totalStaked[0] : totalStaked[1]}\n            myStake={page === 1 ? myStake[0] : myStake[1]}\n            userBalance={userBalance}\n            unStakeHandler={unStakeHandler}\n            stakeHandler={stakeHandler}\n            inputHandler={inputHandler}\n            apy={page === 1 ? apy[0] : apy[1]}\n            page={page}\n          />\n        </div>\n        <div className={classes.for_testing}>\n          <AdminTesting\n            network={network}\n            tokenStakingContract={tokenStakingContract}\n            contractBalance={contractBalance}\n            redistributeRewards={\n              page === 1 ? redistributeRewards : redistributeCustomRewards\n            }\n            claimTst={claimTst}\n            page={page}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}